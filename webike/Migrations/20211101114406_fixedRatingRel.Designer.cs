// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using webike.Models;

namespace webike.Migrations
{
    [DbContext(typeof(WebikeContext))]
    [Migration("20211101114406_fixedRatingRel")]
    partial class fixedRatingRel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("webike.Models.Contact", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<int?>("SenderUserID")
                        .HasColumnType("int");

                    b.HasKey("ContactID");

                    b.HasIndex("SenderUserID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("webike.Models.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityEventActivityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManegerUserID")
                        .HasColumnType("int");

                    b.Property<bool>("Public")
                        .HasColumnType("bit");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventID");

                    b.HasIndex("ActivityEventActivityID");

                    b.HasIndex("ManegerUserID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("webike.Models.EventActivity", b =>
                {
                    b.Property<int>("EventActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatorUserID")
                        .HasColumnType("int");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuitableBikeType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventActivityID");

                    b.HasIndex("CreatorUserID");

                    b.ToTable("EventActivities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EventActivity");
                });

            modelBuilder.Entity("webike.Models.Excercise", b =>
                {
                    b.Property<int>("ExcerciseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatorUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WorkoutEventActivityID")
                        .HasColumnType("int");

                    b.HasKey("ExcerciseID");

                    b.HasIndex("CreatorUserID");

                    b.HasIndex("WorkoutEventActivityID");

                    b.ToTable("Excercises");
                });

            modelBuilder.Entity("webike.Models.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CyclistUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventActivityID")
                        .HasColumnType("int");

                    b.Property<int?>("EventID")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("RatingID");

                    b.HasIndex("CyclistUserID");

                    b.HasIndex("EventActivityID");

                    b.HasIndex("EventID");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("webike.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Events")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCoach")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WantsToBeCoach")
                        .HasColumnType("bit");

                    b.HasKey("UserID");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("webike.Models.Route", b =>
                {
                    b.HasBaseType("webike.Models.EventActivity");

                    b.Property<string>("Addition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndPoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RouteDifficulty")
                        .HasColumnType("int");

                    b.Property<string>("StartPoint")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Route");
                });

            modelBuilder.Entity("webike.Models.Workout", b =>
                {
                    b.HasBaseType("webike.Models.EventActivity");

                    b.HasDiscriminator().HasValue("Workout");
                });

            modelBuilder.Entity("webike.Models.Admin", b =>
                {
                    b.HasBaseType("webike.Models.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("webike.Models.Cyclist", b =>
                {
                    b.HasBaseType("webike.Models.User");

                    b.Property<int?>("EventID")
                        .HasColumnType("int");

                    b.HasIndex("EventID");

                    b.HasDiscriminator().HasValue("Cyclist");
                });

            modelBuilder.Entity("webike.Models.Contact", b =>
                {
                    b.HasOne("webike.Models.User", "Sender")
                        .WithMany("Contacts")
                        .HasForeignKey("SenderUserID");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("webike.Models.Event", b =>
                {
                    b.HasOne("webike.Models.EventActivity", "Activity")
                        .WithMany("Events")
                        .HasForeignKey("ActivityEventActivityID");

                    b.HasOne("webike.Models.Cyclist", "Maneger")
                        .WithMany()
                        .HasForeignKey("ManegerUserID");

                    b.Navigation("Activity");

                    b.Navigation("Maneger");
                });

            modelBuilder.Entity("webike.Models.EventActivity", b =>
                {
                    b.HasOne("webike.Models.Cyclist", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorUserID");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("webike.Models.Excercise", b =>
                {
                    b.HasOne("webike.Models.Cyclist", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorUserID");

                    b.HasOne("webike.Models.Workout", null)
                        .WithMany("Excercises")
                        .HasForeignKey("WorkoutEventActivityID");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("webike.Models.Rating", b =>
                {
                    b.HasOne("webike.Models.Cyclist", "Cyclist")
                        .WithMany()
                        .HasForeignKey("CyclistUserID");

                    b.HasOne("webike.Models.EventActivity", null)
                        .WithMany("Ratings")
                        .HasForeignKey("EventActivityID");

                    b.HasOne("webike.Models.Event", null)
                        .WithMany("Ratings")
                        .HasForeignKey("EventID");

                    b.Navigation("Cyclist");
                });

            modelBuilder.Entity("webike.Models.Cyclist", b =>
                {
                    b.HasOne("webike.Models.Event", null)
                        .WithMany("Attendees")
                        .HasForeignKey("EventID");
                });

            modelBuilder.Entity("webike.Models.Event", b =>
                {
                    b.Navigation("Attendees");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("webike.Models.EventActivity", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("webike.Models.User", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("webike.Models.Workout", b =>
                {
                    b.Navigation("Excercises");
                });
#pragma warning restore 612, 618
        }
    }
}
